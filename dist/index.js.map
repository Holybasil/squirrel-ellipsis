{"version":3,"sources":["../src/index.ts","../src/component/index.tsx"],"sourcesContent":["import SquirrelEllipsis from \"./component\";\nexport * from \"./component/type\";\n\nexport default SquirrelEllipsis;\n","// @ts-nocheck\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { SquirrelEllipsisProps } from \"./type\";\nimport { createPortal } from \"react-dom\";\n\nconst agentStyle = {\n  position: \"absolute\",\n  bottom: 0,\n  left: 0,\n  height: 0,\n  overflow: \"hidden\",\n  paddingTop: 0,\n  paddingBottom: 0,\n  border: \"none\",\n};\n\nconst mirrorProps = [\n  \"box-sizing\",\n  \"width\",\n  \"font-size\",\n  \"font-weight\",\n  \"font-family\",\n  \"font-style\",\n  \"letter-spacing\",\n  \"text-indent\",\n  \"white-space\",\n  \"word-break\",\n  \"overflow-wrap\",\n  \"padding-left\",\n  \"padding-right\",\n];\n\nfunction prevSibling(node, count) {\n  while (node && count--) {\n    node = node.previousElementSibling;\n  }\n  return node;\n}\n\nconst SquirrelEllipsis = (props: SquirrelEllipsisProps) => {\n  const {\n    component: Component = \"div\",\n    ellipsis = <>&thinsp;...&thinsp;</>,\n    basedOn,\n    maxLine: defaultMaxLine,\n    text,\n    className,\n    action = \"more\",\n    trimEndPunc = true,\n    onReflow,\n    ...rest\n  } = props;\n\n  const [truncatedText, setTruncatedText] = useState<string>(text);\n  const [maxLine, setMaxLine] = useState<number>(defaultMaxLine);\n  const [clamped, setClamped] = useState<boolean>(false);\n\n  const units = useRef([]);\n  const shadowRef = useRef<HTMLElement>();\n  const targetRef = useRef();\n  const ellipsisRef = useRef();\n  const clampedHeightRef = useRef(0);\n\n  const displayedText = useMemo(() => {\n    let displayedText = (clamped ? truncatedText : text).trimEnd();\n    if (trimEndPunc && clamped) {\n      displayedText = displayedText.replace(/[.,;:!?，。；：！？]+$/, \"\");\n    }\n    return displayedText;\n  }, [text, truncatedText, trimEndPunc, clamped]);\n\n  useEffect(() => {\n    setTruncatedText(text);\n  }, [text]);\n\n  useEffect(() => {\n    setMaxLine(defaultMaxLine);\n  }, [defaultMaxLine]);\n\n  useEffect(() => {\n    const handleSizeChanged = (entries) => {\n      if (targetRef.current) {\n        copyStyleToShadow();\n        reflow({ basedOn, text, maxLine });\n      }\n    };\n    const resizeObserver = new ResizeObserver(handleSizeChanged);\n    resizeObserver.observe(targetRef.current);\n\n    return () => {\n      if (targetRef.current) {\n        resizeObserver && resizeObserver.unobserve(targetRef.current);\n      }\n    };\n  }, [basedOn, text, maxLine]);\n\n  const copyStyleToShadow = () => {\n    const targetStyle = window.getComputedStyle(targetRef.current);\n    mirrorProps.forEach((key) => {\n      shadowRef.current.style[key] = targetStyle[key];\n    });\n  };\n\n  const reflow = (props) => {\n    /* eslint-disable no-control-regex */\n    const basedOn =\n      props.basedOn ||\n      (/^[\\x00-\\x7F]+$/.test(props.text) ? \"words\" : \"letters\");\n\n    if (basedOn === \"words\") {\n      units.current = props.text.split(/\\b|(?=\\W)/);\n    } else if (basedOn === \"letters\") {\n      units.current = Array.from(props.text);\n    } else {\n      // default\n      units.current = props.text.split(/\\b|(?=\\W)/);\n    }\n    shadowRef.current.innerHTML = units.current\n      .map((c) => {\n        return `<span class='squirrel-ellipsis-unit'>${c}</span>`;\n      })\n      .join(\"\");\n    const ellipsisIndex = putEllipsis(calcIndexes());\n    const nextClamped = ellipsisIndex > -1;\n    const nextTruncatedText = nextClamped\n      ? units.current.slice(0, ellipsisIndex).join(\"\")\n      : props.text;\n    setClamped(nextClamped);\n    setTruncatedText(nextTruncatedText);\n    if (targetRef.current.offsetHeight <= clampedHeightRef.current) {\n      onReflow(nextClamped, nextTruncatedText);\n    }\n  };\n\n  // return the index of the first letter/word of each line\n  // row count: maxLine + 1\n  const calcIndexes = () => {\n    const indexes = [0];\n    let spanNode = shadowRef.current.firstElementChild;\n    if (!spanNode) return indexes;\n\n    let index = 0;\n    let line = 1;\n    let offsetTop = spanNode.offsetTop;\n    while ((spanNode = spanNode.nextElementSibling)) {\n      index++;\n      if (spanNode.offsetTop > offsetTop) {\n        line++;\n        indexes.push(index);\n        offsetTop = spanNode.offsetTop;\n      }\n      if (line > maxLine) {\n        break;\n      }\n    }\n\n    return indexes;\n  };\n\n  const putEllipsis = (indexes) => {\n    // no ellipsis\n    if (!maxLine || indexes.length <= maxLine) return -1;\n    const lastIndex = indexes[maxLine];\n\n    const truncatedUnits = units.current.slice(0, lastIndex);\n\n    // the first ele of maxLine + 1 row\n    const maxOffsetTop = shadowRef.current.children[lastIndex].offsetTop;\n    clampedHeightRef.current = maxOffsetTop;\n    shadowRef.current.innerHTML =\n      truncatedUnits\n        .map((c, i) => {\n          return `<span class='squirrel-ellipsis-unit'>${c}</span>`;\n        })\n        .join(\"\") +\n      `<span class='squirrel-ellipsis-tail'>${ellipsisRef.current.innerHTML}</span>`;\n    const ellipsisNode = shadowRef.current.lastElementChild;\n    let lastTextNode = ellipsisNode.previousElementSibling;\n    while (\n      lastTextNode &&\n      (ellipsisNode.offsetTop >= maxOffsetTop ||\n        ellipsisNode.offsetTop > lastTextNode.offsetTop ||\n        ellipsisNode.offsetHeight > lastTextNode.offsetHeight)\n    ) {\n      shadowRef.current.removeChild(lastTextNode);\n      lastTextNode = ellipsisNode.previousElementSibling;\n      truncatedUnits.pop();\n    }\n    return truncatedUnits.length;\n  };\n\n  const handleExpend = () => {\n    setMaxLine(null);\n  };\n\n  return (\n    <>\n      <Component\n        className={`squirrel-ellipsis ${\n          clamped ? \"squirrel-ellipsis-clamped\" : \"\"\n        } ${className || \"\"}`}\n        ref={targetRef}\n        {...rest}\n      >\n        {displayedText}\n        {clamped && (\n          <span className=\"squirrel-ellipsis-tail\">\n            <span className=\"squirrel-ellipsis-suffix\">{ellipsis}</span>\n            {action && (\n              <span\n                className=\"squirrel-ellipsis-action\"\n                style={{ cursor: \"pointer\" }}\n                role=\"button\"\n                onClick={handleExpend}\n              >\n                {action}\n              </span>\n            )}\n          </span>\n        )}\n      </Component>\n      <>\n        <div\n          style={agentStyle}\n          ref={shadowRef}\n          aria-hidden=\"true\"\n          className={`squirrel-ellipsis-shadow ${className}`}\n        ></div>\n\n        <span style={agentStyle} ref={ellipsisRef}>\n          <span className=\"squirrel-ellipsis-suffix\">{ellipsis}</span>\n          {action && <span className=\"squirrel-ellipsis-action\">{action}</span>}\n        </span>\n      </>\n    </>\n  );\n};\n\nexport default SquirrelEllipsis;\n"],"mappings":"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","names":["src_exports","__export","src_default","__toCommonJS","import_react","agentStyle","mirrorProps","SquirrelEllipsis","props","Component","ellipsis","React","basedOn","defaultMaxLine","text","className","action","trimEndPunc","onReflow","rest","truncatedText","setTruncatedText","maxLine","setMaxLine","clamped","setClamped","units","shadowRef","targetRef","ellipsisRef","clampedHeightRef","displayedText","handleSizeChanged","entries","copyStyleToShadow","reflow","resizeObserver","targetStyle","mirrorProps","key","c","ellipsisIndex","putEllipsis","calcIndexes","nextClamped","nextTruncatedText","indexes","spanNode","index","line","offsetTop","lastIndex","truncatedUnits","maxOffsetTop","i","ellipsisNode","lastTextNode","handleExpend","agentStyle","component_default","src_default","component_default"]}